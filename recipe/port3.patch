Index: Flask-OpenID-1.2.5/docs/conf.py
===================================================================
--- Flask-OpenID-1.2.5.orig/docs/conf.py
+++ Flask-OpenID-1.2.5/docs/conf.py
@@ -41,8 +41,8 @@ source_suffix = '.rst'
 master_doc = 'index'
 
 # General information about the project.
-project = u'Flask-OpenID'
-copyright = u'2010, Armin Ronacher'
+project = 'Flask-OpenID'
+copyright = '2010, Armin Ronacher'
 
 # The version info for the project you're documenting, acts as replacement for
 # |version| and |release|, also used in various other places throughout the
@@ -179,8 +179,8 @@ htmlhelp_basename = 'Flask-OpenIDdoc'
 # Grouping the document tree into LaTeX files. List of tuples
 # (source start file, target name, title, author, documentclass [howto/manual]).
 latex_documents = [
-  ('index', 'Flask-OpenID.tex', u'Flask-OpenID Documentation',
-   u'Armin Ronacher', 'manual'),
+  ('index', 'Flask-OpenID.tex', 'Flask-OpenID Documentation',
+   'Armin Ronacher', 'manual'),
 ]
 
 # The name of an image file (relative to this directory) to place at the top of
@@ -206,8 +206,8 @@ latex_documents = [
 # One entry per manual page. List of tuples
 # (source start file, name, description, authors, manual section).
 man_pages = [
-    ('index', 'flask-openid', u'Flask-OpenID Documentation',
-     [u'Armin Ronacher'], 1)
+    ('index', 'flask-openid', 'Flask-OpenID Documentation',
+     ['Armin Ronacher'], 1)
 ]
 
 intersphinx_mapping = {
Index: Flask-OpenID-1.2.5/example/example.py
===================================================================
--- Flask-OpenID-1.2.5.orig/example/example.py
+++ Flask-OpenID-1.2.5/example/example.py
@@ -108,7 +108,7 @@ def create_or_login(resp):
         session['auth_time'] = pape_resp.auth_time
     user = User.query.filter_by(openid=resp.identity_url).first()
     if user is not None:
-        flash(u'Successfully signed in')
+        flash('Successfully signed in')
         g.user = user
         return redirect(oid.get_next_url())
     return redirect(url_for('create_profile', next=oid.get_next_url(),
@@ -127,11 +127,11 @@ def create_profile():
         name = request.form['name']
         email = request.form['email']
         if not name:
-            flash(u'Error: you have to provide a name')
+            flash('Error: you have to provide a name')
         elif '@' not in email:
-            flash(u'Error: you have to enter a valid email address')
+            flash('Error: you have to enter a valid email address')
         else:
-            flash(u'Profile successfully created')
+            flash('Profile successfully created')
             db_session.add(User(name, email, session['openid']))
             db_session.commit()
             return redirect(oid.get_next_url())
@@ -149,16 +149,16 @@ def edit_profile():
             db_session.delete(g.user)
             db_session.commit()
             session['openid'] = None
-            flash(u'Profile deleted')
+            flash('Profile deleted')
             return redirect(url_for('index'))
         form['name'] = request.form['name']
         form['email'] = request.form['email']
         if not form['name']:
-            flash(u'Error: you have to provide a name')
+            flash('Error: you have to provide a name')
         elif '@' not in form['email']:
-            flash(u'Error: you have to enter a valid email address')
+            flash('Error: you have to enter a valid email address')
         else:
-            flash(u'Profile successfully created')
+            flash('Profile successfully created')
             g.user.name = form['name']
             g.user.email = form['email']
             db_session.commit()
@@ -169,7 +169,7 @@ def edit_profile():
 @app.route('/logout')
 def logout():
     session.pop('openid', None)
-    flash(u'You have been signed out')
+    flash('You have been signed out')
     return redirect(oid.get_next_url())
 
 
Index: Flask-OpenID-1.2.5/flask_openid.py
===================================================================
--- Flask-OpenID-1.2.5.orig/flask_openid.py
+++ Flask-OpenID-1.2.5/flask_openid.py
@@ -10,7 +10,7 @@
     :copyright: (c) 2010 by Armin Ronacher.
     :license: BSD, see LICENSE for more details.
 """
-from __future__ import absolute_import
+
 
 import os
 import pickle
@@ -109,7 +109,7 @@ def isstring(x):
     if sys.version_info[0] >= 3:
         return isinstance(x, str)
     else:
-        return isinstance(x, basestring)
+        return isinstance(x, str)
 
 
 class SessionWrapper(object):
@@ -210,8 +210,8 @@ class OpenIDResponse(object):
         self.fullname = lookup.get_combined('fullname', FULL_NAME_URIS)
         if self.fullname is None:
             first = lookup.get_uri('http://axschema.org/namePerson/first')
-            last = lookup.get_uri(u'http://axschema.org/namePerson/last')
-            self.fullname = u' '.join(x for x in [first, last] if x) or None
+            last = lookup.get_uri('http://axschema.org/namePerson/last')
+            self.fullname = ' '.join(x for x in [first, last] if x) or None
 
         #: desired nickname of the user
         self.nickname = lookup.get('nickname')
@@ -496,7 +496,7 @@ class OpenID(object):
         """
         @wraps(f)
         def decorated(*args, **kwargs):
-            if request.args.get('openid_complete') != u'yes':
+            if request.args.get('openid_complete') != 'yes':
                 return f(*args, **kwargs)
             consumer = Consumer(SessionWrapper(self), self.store_factory())
             args = request.args.to_dict()
@@ -506,16 +506,16 @@ class OpenID(object):
                 return self.after_login_func(OpenIDResponse(
                     openid_response, self.extension_responses))
             elif openid_response.status == CANCEL:
-                self.signal_error(u'The request was cancelled')
+                self.signal_error('The request was cancelled')
             elif openid_response.status == FAILURE:
-                self.signal_error(u'OpenID authentication failure. Mesage: %s'
+                self.signal_error('OpenID authentication failure. Mesage: %s'
                                   % openid_response.message)
             elif openid_response.status == SETUP_NEEDED:
                 # Unless immediate=True, we should never get here
-                self.signal_error(u'OpenID setup was needed')
+                self.signal_error('OpenID setup was needed')
             else:
                 # We should also never get here, as this should be exhaustive
-                self.signal_error(u'OpenID authentication weird state: %s' %
+                self.signal_error('OpenID authentication weird state: %s' %
                                   openid_response.status)
             return redirect(self.get_current_url())
         return decorated
@@ -565,7 +565,7 @@ class OpenID(object):
                 for extension in extensions:
                     auth_request.addExtension(extension)
         except discover.DiscoveryFailure:
-            self.signal_error(u'The OpenID was invalid')
+            self.signal_error('The OpenID was invalid')
             return redirect(self.get_current_url())
         if self.url_root_as_trust_root:
             trust_root = request.url_root
Index: Flask-OpenID-1.2.5/setup.py
===================================================================
--- Flask-OpenID-1.2.5.orig/setup.py
+++ Flask-OpenID-1.2.5/setup.py
@@ -29,7 +29,6 @@ if not os.path.exists("./docs/_themes/RE
 extra = {}
 if sys.version_info[0] >= 3:
     install_requires = ['Flask>=0.10.1', 'python3-openid>=2.0']
-    extra['use_2to3'] = True
 else:
     install_requires = ['Flask>=0.3', 'python-openid>=2.0']
 
